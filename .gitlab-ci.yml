stages:
  - prepare
  - test
  - build
  - publish

variables:
  # cache gradle working directory
  GRADLE_USER_HOME: /cache/.gradle
  POSTGRES_USER: docker
  POSTGRES_PASSWORD: docker
  POSTGRES_DB: docker
  MONGO_INITDB_ROOT_USERNAME: mongoadmin
  MONGO_INITDB_ROOT_PASSWORD: secret
  MONGO_INITDB_DATABASE: cytomine
  DOCKERHUB_CORE_REPO: cytomine/core
  DOCKER_TMP_IMAGE_NAME: $CI_PIPELINE_ID:latest
  
# variable to register in project:
# - DOCKERHUB_URL: url of dockerhub (e.g. docker.io)
# - DOCKERHUB_USER: cytomine username on dockerhub
# - DOCKERHUB_PASSWORD: cytomine password on dockerhub
# - SCRIPTS_REPO_ACCESS_TOKEN_NAME: access token name for docker-entrypoint-scripts repo 
# - SCRIPTS_REPO_ACCESS_TOKEN_VALUE: access token value for docker-entrypoint-scripts repo
# - SCRIPTS_REPO_URL: git url (no scheme/protocol) of the docker-entrypoint-scripts repo  

default:
  tags: 
    - docker

workflow:
  rules:
    - if: $CI_COMMIT_TAG != null && $CI_COMMIT_TAG =~ /^ce-.*$/
      variables: 
        IS_OPEN_SOURCE_RELEASE_CANDIDATE: "true"
    - if: $CI_COMMIT_TAG == null || $CI_COMMIT_REF_NAME !~ /^ce-.*$/
      variables: 
        IS_OPEN_SOURCE_RELEASE_CANDIDATE: "false"
    - when: always

make-version-name:
  stage: prepare
  # regex check does not work with /bin/sh because of parenthesis so we need /bin/bash here
  image: bash:5.2.15-alpine3.16
  script:
    - if [[ "$CI_COMMIT_REF_NAME" =~ ^refs/tags/ ]] then
        echo "CM_VERSION=$CI_COMMIT_TAG" > .env;
      else
        echo "CM_VERSION=$CI_COMMIT_SHORT_SHA-$(date '+%Y%m%d%H%M%S')-SNAPSHOT" > .env;
      fi
    - cat .env
  artifacts:
    paths:
      - .env

run-junit:
  stage: test
  image: gradle:7.4.2-jdk17-alpine
  services:
    - alias: postgres
      name: registry.cytom.in/cm/rnd/cytomine/tools/envs/postgis:15-3.3-alpine-1.2.0
    - alias: mongodb
      name: mongo:4.4.18-focal
    - alias: rabbitmq
      name: rabbitmq:3.10
  script:
    - export GRADLE_USER_HOME=$GRADLE_USER_HOME
    - sed -i -- "s/localhost:5433/postgres:5432/g" src/test/resources/application.yml
    - "sed -i -- 's/host: 127.0.0.1/host: mongodb/g' src/test/resources/application.yml"
    - "sed -i -- 's/port: 27018/port: 27017/g' src/test/resources/application.yml"
    # test log too large for gitlab if executed at 'debug' log level 
    - sed -i -- "s/name=\"be.cytomine\" level=\"debug\"/name=\"be.cytomine\" level=\"info\"/g" src/test/resources/logback-test.xml  
    - gradle :test --no-daemon
  artifacts:
    reports:
      junit: build/test-results/test/**/TEST-*.xml
      # TODO integrate code coverage

build-jar:
  stage: build
  image: gradle:7.4.2-jdk17-alpine
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: make-version-name
      artifacts: true
  script:
    - source .env
    - export GRADLE_USER_HOME=$GRADLE_USER_HOME
    - "sed -i -- 's/version: 0.0.0/version: '$CM_VERSION'/g' src/main/resources/application.yml"
    - gradle bootJar --console=verbose
    - mv build/libs/cytomine.jar build/libs/cytomine-$CM_VERSION.jar
  artifacts:
    when: on_success
    expire_in: never
    paths: 
      - build/libs/cytomine-*.jar

build-docker-image:
  stage: build
  image: docker:latest
  needs:
    - job: make-version-name
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - source .env
    - export SCRIPTS_REPO_FULL_URL=https://${SCRIPTS_REPO_ACCESS_TOKEN_NAME}:${SCRIPTS_REPO_ACCESS_TOKEN_VALUE}@${SCRIPTS_REPO_URL}
    - docker build --build-arg CORE_VERSION=${CM_VERSION} --build-arg SCRIPTS_REPO_TAG=latest --secret id=scripts_repo_url,env=SCRIPTS_REPO_FULL_URL -t $DOCKER_TMP_IMAGE_NAME -f docker/Dockerfile .

 
publish-docker-image: 
  stage: publish
  image: docker:latest
  needs:
    - job: build-docker-image
      artifacts: false  # artifact are in docker cache (is it a safe assumption in a multi-runner env ?)
    - job: run-junit
      artifacts: false
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - source .env
    - |
      if [ $IS_OPEN_SOURCE_RELEASE_CANDIDATE = "true" ]; then
        echo "Open-source release candidate (=$IS_OPEN_SOURCE_RELEASE_CANDIDATE) > push image to DockerHub"
        export DOCKER_IMAGE_NAME=cytomine/core
        export TARGET_CI_REGISTRY=$DOCKERHUB_URL
        export TARGET_CI_REGISTRY_USER=$DOCKERHUB_USER
        export TARGET_CI_REGISTRY_PASSWORD=$DOCKERHUB_PASSWORD
      else
        echo "Closed-source release candidate (=$IS_OPEN_SOURCE_RELEASE_CANDIDATE) > push image to private GitLab registry"
        export DOCKER_IMAGE_NAME=$CI_REGISTRY_IMAGE
        export TARGET_CI_REGISTRY=$CI_REGISTRY
        export TARGET_CI_REGISTRY_USER=$CI_REGISTRY_USER
        export TARGET_CI_REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD
      fi
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
    - export DOCKER_IMAGE_NAME_FULL=$DOCKER_IMAGE_NAME:$CM_VERSION
    - docker tag $DOCKER_TMP_IMAGE_NAME $DOCKER_IMAGE_NAME_FULL
    - docker push $DOCKER_IMAGE_NAME_FULL
  after_script:
    # cleaning up images
    - docker rmi $DOCKER_IMAGE_NAME_FULL $DOCKER_TMP_IMAGE_NAME

# create-release:
#   stage: publish
#   image: registry.gitlab.com/gitlab-org/release-cli:latest
#   rules:
#     - if: $CI_COMMIT_TAG
#   needs:
#     - job: publish-jar
#       artifacts: false
#     - job: make-version-name
#       artifacts: true
#     - job: publish-docker-image
#       artifacts: false
#   release:
#     tag_name: '$CI_COMMIT_TAG'
#     name: 'Release $CI_COMMIT_TAG'
#     description: > 
#       This is an automated release generated for tag '$CI_COMMIT_TAG'
#       Docker image: ${CI_REGISTRY_IMAGE}/core-eet:${CM_VERSION_NAME}
#       Jar file: TODO
#   script:
#     - source .env
#     - echo "creating a release" 