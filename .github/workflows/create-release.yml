name: Create release

on:
  push:
    tags:
      - "*.*.*"

env:
  JAR_FILE: "cytomine-${{ github.ref_name }}.jar"

jobs:
  build-jar:
    runs-on: ubuntu-latest

    steps:
      - name: Set up the repository
        uses: actions/checkout@v3

      - name: Set up JDK ${{ vars.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: ${{ vars.JAVA_DIST }}
          java-version: ${{ vars.JAVA_VERSION }}

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ vars.GRADLE_VERSION }}

      - name: Create JAR file
        run: ./gradlew bootJar

      - name: Store the artifact
        uses: actions/upload-artifact@v3
        with:
          name: cytomine-jar
          path: build/libs/cytomine.jar
          retention-days: 1

  create-release:
    runs-on: ubuntu-latest

    steps:
      - name: Get JAR file
        uses: actions/download-artifact@v3
        with:
          name: cytomine-jar

      - name: Rename the JAR file
        run: mv cytomine.jar cytomine-${{ github.ref_name }}.jar

      - name: Prerelease check
        run: |
          if [[ ${{ github.ref_name }} =~ ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$ ]]; then
            echo "prerelease=false" >> $GITHUB_ENV
          else
            echo "prerelease=true" >> $GITHUB_ENV
          fi

      - name: Create release
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                generate_release_notes: true,
                name: ${{ github.ref_name }},
                owner: context.repo.owner,
                prerelease: $prerelease,
                repo: context.repo.repo,
                tag_name: ${{ github.ref_name }},
              });
            } catch (error) {
              core.setFailed(error.message);
            }
            
            core.exportVariable("release_id", response.data.id);

  upload-release-asset:
    needs:
      - build-jar
      - create-release
    runs-on: ubuntu-latest

    steps:
      - name: Get the JAR file
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.JAR_FILE }}

      - name: Upload release asset
        uses: actions/github-script@v6
        with:
          script: |
            try {
              github.rest.repos.uploadReleaseAsset({
                data: ${{ env.JAR_FILE }},
                name: ${{ env.JAR_FILE }},
                owner: context.repo.owner,
                release_id: $release_id,
                repo: context.repo.repo,
              });
            } catch (error) {
              core.setFailed(error.message);
            }
